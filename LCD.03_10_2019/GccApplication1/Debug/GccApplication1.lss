
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000948  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000560  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018b  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013c  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 00 	call	0x120	; 0x120 <main>
  8a:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
#define  En PD2


void LCD_Command(unsigned char cmmand)
{
	LCD_Data_Port=cmmand; // Send data on command port
  92:	85 bb       	out	0x15, r24	; 21
	LCD_cmmand_Port&=~(1<<RS);//Enable command Register
  94:	90 98       	cbi	0x12, 0	; 18
	LCD_cmmand_Port&=~(1<<RW);//Enable write mode
  96:	91 98       	cbi	0x12, 1	; 18
	LCD_cmmand_Port|=(1<<En);// Make enable pin 1
  98:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	87 ea       	ldi	r24, 0xA7	; 167
  9c:	91 e6       	ldi	r25, 0x61	; 97
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_Command+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_Command+0x12>
  a4:	00 00       	nop
	_delay_ms(100);			 // Wait for 100ms
	LCD_cmmand_Port&=~(1<<En);//Make Enable pin 0
  a6:	92 98       	cbi	0x12, 2	; 18
  a8:	87 ea       	ldi	r24, 0xA7	; 167
  aa:	91 e6       	ldi	r25, 0x61	; 97
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Command+0x20>
  b2:	00 00       	nop
	_delay_ms(100);
}
  b4:	08 95       	ret

000000b6 <LCD_data>:

void LCD_data(unsigned char data)
{
	LCD_Data_Port=data;			//Send data on Data_port
  b6:	85 bb       	out	0x15, r24	; 21
	LCD_cmmand_Port&=~(1<<RW);  // Make write register enable 
  b8:	91 98       	cbi	0x12, 1	; 18
	LCD_cmmand_Port|=(1<<RS);	// Make data register enable
  ba:	90 9a       	sbi	0x12, 0	; 18
	LCD_cmmand_Port|=(1<<En);   // Make enable pin  1 
  bc:	92 9a       	sbi	0x12, 2	; 18
  be:	87 ea       	ldi	r24, 0xA7	; 167
  c0:	91 e6       	ldi	r25, 0x61	; 97
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_data+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_data+0x12>
  c8:	00 00       	nop
	_delay_ms(100);				// wait for 100 ms
	LCD_cmmand_Port&=~(1<<En);  // Make enable pin 0
  ca:	92 98       	cbi	0x12, 2	; 18
	LCD_cmmand_Port&=~(1<<RS);  // Disable the data register
  cc:	90 98       	cbi	0x12, 0	; 18
	  
}
  ce:	08 95       	ret

000000d0 <LCD_init>:

void LCD_init()
{
	
	LCD_cmmand_DDR=0xFF;		// Make command port as a output
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	LCD_Data_DDR=0xFF;			// Make data port as a output 
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	87 e8       	ldi	r24, 0x87	; 135
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_init+0xa>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_init+0x10>
  e0:	00 00       	nop
	_delay_ms(20);				// Delay of 20 ms;
	LCD_Command(0x38);			// For 8 bit mode
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x0C);			// Display on cursor off
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x06);			// Auto increment cursor 
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x01);			// Clear display
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x80);			//Cursor at home position
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
}
 100:	08 95       	ret

00000102 <LCD_send_string>:

void LCD_send_string(unsigned char *data)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	for(int i=0;data[i]!=0;i++)
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <LCD_send_string+0x18>
	LCD_Command(0x06);			// Auto increment cursor 
	LCD_Command(0x01);			// Clear display
	LCD_Command(0x80);			//Cursor at home position
}

void LCD_send_string(unsigned char *data)
 10e:	21 96       	adiw	r28, 0x01	; 1
{
	for(int i=0;data[i]!=0;i++)
	{
	  LCD_data(data[i]);	
 110:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_data>
	LCD_Command(0x80);			//Cursor at home position
}

void LCD_send_string(unsigned char *data)
{
	for(int i=0;data[i]!=0;i++)
 114:	89 91       	ld	r24, Y+
 116:	88 23       	and	r24, r24
 118:	d9 f7       	brne	.-10     	; 0x110 <LCD_send_string+0xe>
	{
	  LCD_data(data[i]);	
		
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
  LCD_init();						 // Initialize the data
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_init>
  LCD_send_string("Akshay Balapure is now practiicing for embedded programming");//Send string to dataport
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 81 00 	call	0x102	; 0x102 <LCD_send_string>
 12c:	87 ea       	ldi	r24, 0xA7	; 167
 12e:	91 e6       	ldi	r25, 0x61	; 97
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x10>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x16>
 136:	00 00       	nop
  _delay_ms(100);					 // delay of 1000ms
  while(1)
  {
   
    LCD_Command(0x18); // shift entire display to left    
 138:	88 e1       	ldi	r24, 0x18	; 24
 13a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 13e:	fc cf       	rjmp	.-8      	; 0x138 <main+0x18>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
